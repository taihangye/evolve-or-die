{
  
    
        "post0": {
            "title": "The Leadership Pipeline - leadership development matrix",
            "content": "Three categories of potentials . Turn potential: Able to do the work at the next level in three to five years or sooner (usually for tech this should be 1-3 years) | Growth potential: Able to do the bigger jobs at the same level in the near term | Mastery potential: Able to do the same kind of jobs currently being done, only better | . Seven dimensions to measure performance . Operating results (cost, profit) | Customer results (acquisition, retention, penetration, satisfaction) | Leadership results (setting direction, communicating, developing people, setting standards) | Management results (control, quality, timeliness) | Relationships (working relationships, team play, internal and external, business and government) | Social responsibility (doing right by the community, governments and environment) | Individual technical competence (those parts of work only you should do) | . Three categories of performance . Exceptional performance: Constant exceeding | Full performance: Constantly meet | Not yet full performance: Below standard | . . . Leadership development matrix . Legend Dark green: Super star. The last person to let go | Light green: Valuable resource. Either showing high potential or exceptional performance | Light Sky Blue: Key stone. Main contributors of the org/team and need to be recognized and appreciated | Yellow: A question mark. Need attention on either performance and/or potential. If people leaving, it’s okay | Red: An exclamation mark. Need extra attention from manager and need to improve immediately. Otherwise, need to let go or be demoted | . | . . Transitions among different boxes | . .",
            "url": "https://taihangye.github.io/evolve-or-die/leadership/2021/07/05/the-leadership-pipeline-development-matrix.html",
            "relUrl": "/leadership/2021/07/05/the-leadership-pipeline-development-matrix.html",
            "date": " • Jul 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Think Again - summary 2",
            "content": "Sometimes people resist not because they’re dismissing the argument but because they’re rejecting the feeling of their behavior being controlled. It helps to respect their autonomy by reminding them that it’s up to them to choose what they believe. . 人不喜欢被直接操控，比如在青春期父母如果让你读书，你就偏不读书。我觉得想要改变一个人，是需要让ta自己意识到需要做出改变，通过间接的影响力潜移默化地改变。 . Seeing the shades of gray can make us more open. . 世界不是非黑即白，认识人和事的复杂性，能够让我们更加开放的看问题。 . Invite kids to do multiple drafts and seek feedback from others. Creating different versions of a drawing or a story can encourage kids to learn the value of revising their ideas. Getting input from others can also help them to continue evolving their standards. They might learn to embrace confusion - and to stop expecting perfection on the first try. . 不仅是小孩，大人也是要试错并且主动寻求反馈，并进一步提升。 . Stop asking kids what they want to be when they grow up. They don’t have to define themselves in terms of a career. A single identity can close the door to alternatives. Instead of trying to narrow their options, help them broaden their possibilities. They don’t have to be one thing - they can do many things. . 别问小孩你长大想成为什么。其实这个是一个非常局限性的问题，而没有什么意义。小时候可能想成为科学家，老师，宇航员，但又有多少家长当真了，或者付诸行动。还不如让孩子知道他有很多可能性，而且不需要用一个职业来决定一个人，一个人可以做很多事，但成为什么样的人不需要只和一件事做联系。 . Establish psychological safety. In learning cultures, people feel confident that they can question and challenge the status quo without being pubished. Psychological safety often starts with leaders role-modeling humility. . 说出和不同意见时需要勇气的，作为团队领导者，需要降低勇气的门槛，让更多的人愿意分享。需要非常谦卑，公开承认自己的错误，肯定反馈并且做出明显的行为变化，让大家知道不是说一套做一套，而是真正鼓励大家有思考的发言、讨论和反馈。 . Don’t evaluate decisions based only on the result; track how thoroughly different options are considered in the process. A bad process with a good outcome is luck. A good process with a bad outcome might be a smart experiment. . 这还是强调了不要为结果论。这是非常危险的，比如Uber早期，很多员工做的违背道德甚至违法的行为，很大程度上就是所谓的“狼性文化”和“结果论”。但如何设立一个机制能去搞笑衡量做事的过程，是一个值得讨论的话题。这里我觉得dot collector是一个好的方案，但可能要和项目、人员做更紧密的结合。举个栗子，一个项目从提出想法，讨论立项，具体计划，执行迭代，持续跟踪，都需要有及时的多角度的反馈。 . Schedule a life checkup. It’s easy to get caught in escalation of commitment to an unfulfilling path. Just as you schedule health checkups with your doctor, it’s worth having a life checkup on your calendar once or twice a year. It’s a way assess how much you’re learning, how your beliefs and goals are evolving, and whether your next steps warrant some rethinking. . 每年两次看看自己工作和生活的处境。及时做出反思和调整。当然我觉得可以把这两次机会只是作为整理的契机，平时有任何的反思都应该及时记录和演进，而不是只等到那两次才开始想。我这一年会有月度的总结，和跟踪记录了每天干了什么的日志，时不时也会反思做过的是以及思考要做的事。 .",
            "url": "https://taihangye.github.io/evolve-or-die/think_again/2021/07/04/think-again-5.html",
            "relUrl": "/think_again/2021/07/04/think-again-5.html",
            "date": " • Jul 4, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Think Again - summary 1",
            "content": "To prevent overconfidence in your knowledge, reflect on how well you can explain a given subject. . 这个其实是很简单的道理，但很多时候我自己也不愿意花时间去写下来自己的理解，说到底还是“着急”的心态，觉得自己会了，觉得应该更快地看完一本书，学完一门课。 . It helps you focus less on proving youself - and more on improving yourself. . 证明自己是重要的，但不要纠结证明是对的，而是要找到正确的方法去做事以及时刻反思而提升自己的水平。 . Build a challenge network, not just a support network. It’s helpful to have cheerleaders encouraging you, but you also need critics to challenge you. Who are your most thoughtful critics? Once you’ve identified them, invite them to question your thinking. To make sure they know you’re open to dissenting views, tell them why you respect their pushback - and where they usually add the most value. . 这个是需要刻意去做的事，希望能从身边的朋友比如ASES的小伙伴们开始。 . Practice the art of persuasive listening. When we’re trying to open other people’s minds, we can frequently accomplish more by listening than by talking. How can you show an interest in helping people crystallize their own views and uncover their own reasons for change? A good way to start is to increase your question-to-statement ratio. . Question-to-statement ratio（多问少陈述), 是一个比较新颖的名词。挺认同的，很多时候是自己在别人的问题中发现自己想法的漏洞，或者看到其它选项的优点的。 . Remember that less is often more. If you pile on too many different reasons to support your case, it can make your audiences defensive - and cause them to reject your entire argument based on its least compelling points. Instead of diluting your argument, lead with a few your strongest points. . 很多时候说话没有重点的问题是想要表达的太多，列了太多论点，反而稀释了最重要的观点。 .",
            "url": "https://taihangye.github.io/evolve-or-die/think_again/2021/07/03/think-again-6.html",
            "relUrl": "/think_again/2021/07/03/think-again-6.html",
            "date": " • Jul 3, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Think Again - conflicts and rethink",
            "content": "All in all, more than a hundred studies have examined conflict types in over eight thousand teams. A meta-analysis of those studies showed that relationship conflict is generally bad for performance, but some task conflict can be beneficial: it’s been linked to higher creativity and smarter choices. . The absence of conflict is not harmony, it’s apathy. . Relationship conflict is destructive in part because it stands in way of rethinking. When a clash gets personal and emotional, we become self-tighteous preachers of our own views, spiteful prosecurtors of the other side, or single-minded politicians who dismiss opinions that don’t come from our side. Task conflict can be constructive when it brings diversity of thought, preventing us from getting trapped in overconfidence cycles. It can help up stay humble, surface doubts, and make us curious about what we might be missing. That can lead us to think again, moving us closer to the truth without damaging our relationships. . 完全追求没有矛盾，不是和谐，而是冷漠。它说明不不关心问题，不关心问题中的其他相关方。这其实是在日常工作中挺常见的，往往一个会议如果有超过10个人参加，往往参与度，讨论度都会集中在个别一些人上，其他人会因为各种原因tune out，甚至开始做自己的事。所以我觉得会议的目的是选择参与者的标准，如果一个会议是为了讨论问题，首先要考虑会议是否有必要开(比如是否可以再文档上先协作，再决定是否有必要实时地交流)，会议参与者也是只需要邀请会深度贡献在问题某一个(或几个)方面的人，邀请更多地反而会稀释讨论的深度; 如果会议是其他目的，比如汇报工作，或者传达消息，那自然有另外的流程与要求。 . 对事的矛盾可以演化为事物前进的动力，对人的矛盾往往涉及到情感的攻击而偏离矛盾的本身。团队的领导需要很明确这一点，尤其是对比较年轻不太有经验的成员，或是明显感觉到对人有攻击性的成员，需要单独说明对事不对人的原因，自己的标准。在刚工作的前两年，自己在这方面也做的不好，有时候会觉得为啥一个人那么讨厌，其实对方可能针对我完成的代码或是设计，而不是对我本人有意见。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/27/think-again-5.html",
            "relUrl": "/markdown/2021/06/27/think-again-5.html",
            "date": " • Jun 27, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Think Again - being wrong and opinions",
            "content": "I’ve noticed a paradox in great scientists and superforecasters: the reason they’re so comfortable being wrong is that they’re terrified of being wrong. What sets them apart is the time horizon. They’re determined to reach the correct answer in the long run, and they know that means they have to be open to stumbling, backtracking, and rerouting in the short run. . 这就像学生时代，作业的错误是为了避免小考的错误，小考的错误是为了避免期末考的错误，期末考的错误是为了避免升学考试的错误。在不同规模上”试错，犯错，反思，迭代，进步”，控制犯错的成本和时机。当然这个在一个组织中很取决于组织的文化，是否有心理上的安全感，可以让大家看到你犯的错误，通过别人的错误来反思。这个后面的分享会提到。 . Yes, we’re entitled to hold opinions inside our own heads. If we choose to express them out louad, though, I think it’s our responsibility to ground them in logic and facts, share our reasoning with others, and change our minds when better evidence emerges. . 我们都有权利拥有自己的想法。但想要表达出来的时候，要考虑自己的想法是否成熟，理由或是数据是否能支持你的想法，有没有想过对立的想法。想法谁都可以有，但受过压力测试的想法，有事实支撑和逻辑严密的想法往往才是有分享价值的。往往越有智慧的人，越不轻意分享自己的想法，哪怕这些想法在一般人看来已经可以奉为圭臬。其次一个想法本身是有时空局限性的，100年前的好想法，现在看来可能很蠢。在听到很有道理的想法时，要看它的使用范围和条件在你面对的条件下是否满足，在分享自己的想法时，要加上语境和限制条件，在新的条件出现时，进一步调整成熟的想法。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/27/think-again-4.html",
            "relUrl": "/markdown/2021/06/27/think-again-4.html",
            "date": " • Jun 27, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "How-to: classify pokemon generation one",
            "content": "I am a fan of pokemon, and remember playing generation one when I was a kid. I could exactly call out the name every pokemon, it&#39;s type and many other stats. I feel it would be interesting with deep learning, how far a model can accurately classify 150 gen-one pokemons. I feel human accuracy should be more than 99% . from fastai.vision.all import * . Download datasets and clean . I searched online and found this 7000 labeled dataset from kaggle, credit to Lance Zhang for prepapring and cleaning it. . path = Path(&#39;PokemonData&#39;) . path.ls() . (#150) [Path(&#39;PokemonData/Weezing&#39;),Path(&#39;PokemonData/Magneton&#39;),Path(&#39;PokemonData/Horsea&#39;),Path(&#39;PokemonData/Rhydon&#39;),Path(&#39;PokemonData/Meowth&#39;),Path(&#39;PokemonData/Weedle&#39;),Path(&#39;PokemonData/Machoke&#39;),Path(&#39;PokemonData/Ivysaur&#39;),Path(&#39;PokemonData/Vulpix&#39;),Path(&#39;PokemonData/Snorlax&#39;)...] . Path.BASE_PATH = path . (path/&quot;Weezing&quot;).ls() . (#50) [Path(&#39;Weezing/d7759ca041a54e40bcd0e5983593a398.jpg&#39;),Path(&#39;Weezing/91e6d87ec73143f6870b49711c64916b.jpg&#39;),Path(&#39;Weezing/df575a5993254fbca9cdea90dd91588d.jpg&#39;),Path(&#39;Weezing/dbb9cf5baf0d4db7aa4106fe500713fc.jpg&#39;),Path(&#39;Weezing/55da5238b2a04623b61594716a59bf6e.jpg&#39;),Path(&#39;Weezing/2341ef30aa36401f8abefcb4cf41556d.jpg&#39;),Path(&#39;Weezing/51bfdcd289a04e5db15f5c4ba883c17c.jpg&#39;),Path(&#39;Weezing/1cdbf5d1e44840a88af213c3d5db7e65.jpg&#39;),Path(&#39;Weezing/6c898f7248c6485d9a23efc7196a96ca.jpg&#39;),Path(&#39;Weezing/ec8c7d0c9f39409e89feb10ec5332f0f.jpg&#39;)...] . Let&#39;s take some examples to see how the image look like. . example = Image.open((path/&quot;Weezing&quot;).ls()[0]) example . Note that the shape of images are different. . example.shape . (360, 413) . example1 = Image.open((path/&quot;Weezing&quot;).ls()[1]) example1.shape . (881, 984) . fns = get_image_files(path) fns . (#6820) [Path(&#39;Weezing/d7759ca041a54e40bcd0e5983593a398.jpg&#39;),Path(&#39;Weezing/91e6d87ec73143f6870b49711c64916b.jpg&#39;),Path(&#39;Weezing/df575a5993254fbca9cdea90dd91588d.jpg&#39;),Path(&#39;Weezing/dbb9cf5baf0d4db7aa4106fe500713fc.jpg&#39;),Path(&#39;Weezing/55da5238b2a04623b61594716a59bf6e.jpg&#39;),Path(&#39;Weezing/2341ef30aa36401f8abefcb4cf41556d.jpg&#39;),Path(&#39;Weezing/51bfdcd289a04e5db15f5c4ba883c17c.jpg&#39;),Path(&#39;Weezing/1cdbf5d1e44840a88af213c3d5db7e65.jpg&#39;),Path(&#39;Weezing/6c898f7248c6485d9a23efc7196a96ca.jpg&#39;),Path(&#39;Weezing/ec8c7d0c9f39409e89feb10ec5332f0f.jpg&#39;)...] . I found there are some svg files that fast.ai model can&#39;t take. Thus, we need to unlink those failure images. . failed = verify_images(fns) . failed.map(Path.unlink); . Prepare datablock . Since the image size is different and we want to have data augumentation. I adopt the presize methodology that is mentioned in fast.ai notebook 5: 05_pet_breeds. . Basically, it resizes the images to a relative larger dimensions (here 460) which is signidicantly larger than the target training dimensions, and then composes all of the common augementation oeprations into one, and perform the combined operation on the GPU only once at the end of processing, rather than performing the operations individually and interpolating multiple times . pokemons = DataBlock( blocks=(ImageBlock, CategoryBlock), splitter=RandomSplitter(seed=1), get_items=get_image_files, get_y=parent_label, item_tfms=Resize(460), batch_tfms=aug_transforms(size=224, min_scale=0.75) ) dls = pokemons.dataloaders(path) . dls.show_batch(nrows=1, ncols=4) . dls.show_batch(nrows=1, ncols=4, unique=True) . resnet18_learn = cnn_learner(dls, resnet18, metrics=error_rate) resnet18_learn.fine_tune(2) . epoch train_loss valid_loss error_rate time . 0 | 4.632047 | 1.978062 | 0.450147 | 00:25 | . epoch train_loss valid_loss error_rate time . 0 | 1.664783 | 0.759323 | 0.175953 | 00:27 | . 1 | 0.921666 | 0.581305 | 0.139296 | 00:28 | . Interpret the basic model . The baseline is around 86% accuracy. Let&#39;s find out some wrong predictions. . interp = ClassificationInterpretation.from_learner(resnet18_learn) interp.most_confused() . [(&#39;Kingler&#39;, &#39;Krabby&#39;, 5), (&#39;Mankey&#39;, &#39;Primeape&#39;, 5), (&#39;Electrode&#39;, &#39;Voltorb&#39;, 4), (&#39;Growlithe&#39;, &#39;Arcanine&#39;, 4), (&#39;Golbat&#39;, &#39;Zubat&#39;, 3), (&#39;Ivysaur&#39;, &#39;Venusaur&#39;, 3), (&#39;Poliwhirl&#39;, &#39;Poliwrath&#39;, 3), (&#39;Ponyta&#39;, &#39;Rapidash&#39;, 3), (&#39;Rhyhorn&#39;, &#39;Onix&#39;, 3), (&#39;Kadabra&#39;, &#39;Alakazam&#39;, 2), (&#39;Machoke&#39;, &#39;Rhydon&#39;, 2), (&#39;Nidoqueen&#39;, &#39;Blastoise&#39;, 2), (&#39;Pidgeot&#39;, &#39;Pidgeotto&#39;, 2), (&#39;Pidgeot&#39;, &#39;Pidgey&#39;, 2), (&#39;Slowpoke&#39;, &#39;Slowbro&#39;, 2), (&#39;Abra&#39;, &#39;Kadabra&#39;, 1), (&#39;Aerodactyl&#39;, &#39;Mewtwo&#39;, 1), (&#39;Aerodactyl&#39;, &#39;Nidoking&#39;, 1), (&#39;Alakazam&#39;, &#39;Kadabra&#39;, 1), (&#39;Arcanine&#39;, &#39;Rapidash&#39;, 1), (&#39;Blastoise&#39;, &#39;Wartortle&#39;, 1), (&#39;Chansey&#39;, &#39;Venonat&#39;, 1), (&#39;Charizard&#39;, &#39;Charmeleon&#39;, 1), (&#39;Charmander&#39;, &#39;Lickitung&#39;, 1), (&#39;Charmander&#39;, &#39;Psyduck&#39;, 1), (&#39;Charmander&#39;, &#39;Vulpix&#39;, 1), (&#39;Clefairy&#39;, &#39;Clefable&#39;, 1), (&#39;Cloyster&#39;, &#39;MrMime&#39;, 1), (&#39;Cloyster&#39;, &#39;Tangela&#39;, 1), (&#39;Cubone&#39;, &#39;Wartortle&#39;, 1), (&#39;Dewgong&#39;, &#39;Dragonair&#39;, 1), (&#39;Dewgong&#39;, &#39;Ninetales&#39;, 1), (&#39;Diglett&#39;, &#39;Dugtrio&#39;, 1), (&#39;Ditto&#39;, &#39;Grimer&#39;, 1), (&#39;Ditto&#39;, &#39;Metapod&#39;, 1), (&#39;Doduo&#39;, &#39;Dodrio&#39;, 1), (&#39;Dragonair&#39;, &#39;Dratini&#39;, 1), (&#39;Dragonair&#39;, &#39;Vaporeon&#39;, 1), (&#39;Dratini&#39;, &#39;Raichu&#39;, 1), (&#39;Dratini&#39;, &#39;Vaporeon&#39;, 1), (&#39;Ekans&#39;, &#39;Dratini&#39;, 1), (&#39;Exeggutor&#39;, &#39;Victreebel&#39;, 1), (&#39;Flareon&#39;, &#39;Dragonite&#39;, 1), (&#39;Flareon&#39;, &#39;Farfetchd&#39;, 1), (&#39;Gengar&#39;, &#39;Haunter&#39;, 1), (&#39;Geodude&#39;, &#39;Golem&#39;, 1), (&#39;Geodude&#39;, &#39;Kingler&#39;, 1), (&#39;Geodude&#39;, &#39;Machamp&#39;, 1), (&#39;Geodude&#39;, &#39;Muk&#39;, 1), (&#39;Geodude&#39;, &#39;Rhyhorn&#39;, 1), (&#39;Gloom&#39;, &#39;Beedrill&#39;, 1), (&#39;Golduck&#39;, &#39;Rhydon&#39;, 1), (&#39;Golduck&#39;, &#39;Seadra&#39;, 1), (&#39;Golem&#39;, &#39;Graveler&#39;, 1), (&#39;Graveler&#39;, &#39;Onix&#39;, 1), (&#39;Grimer&#39;, &#39;Omastar&#39;, 1), (&#39;Growlithe&#39;, &#39;Ponyta&#39;, 1), (&#39;Gyarados&#39;, &#39;Alolan Sandslash&#39;, 1), (&#39;Gyarados&#39;, &#39;Electabuzz&#39;, 1), (&#39;Haunter&#39;, &#39;Abra&#39;, 1), (&#39;Hitmonchan&#39;, &#39;Machamp&#39;, 1), (&#39;Horsea&#39;, &#39;Nidoqueen&#39;, 1), (&#39;Hypno&#39;, &#39;Alakazam&#39;, 1), (&#39;Hypno&#39;, &#39;Kadabra&#39;, 1), (&#39;Hypno&#39;, &#39;Magmar&#39;, 1), (&#39;Ivysaur&#39;, &#39;Tentacool&#39;, 1), (&#39;Jigglypuff&#39;, &#39;Clefairy&#39;, 1), (&#39;Jolteon&#39;, &#39;Zapdos&#39;, 1), (&#39;Jynx&#39;, &#39;Aerodactyl&#39;, 1), (&#39;Kabuto&#39;, &#39;Diglett&#39;, 1), (&#39;Kabuto&#39;, &#39;Voltorb&#39;, 1), (&#39;Kabutops&#39;, &#39;Gyarados&#39;, 1), (&#39;Kingler&#39;, &#39;Gyarados&#39;, 1), (&#39;Koffing&#39;, &#39;Weezing&#39;, 1), (&#39;Krabby&#39;, &#39;Kingler&#39;, 1), (&#39;Krabby&#39;, &#39;Omastar&#39;, 1), (&#39;Lapras&#39;, &#39;Graveler&#39;, 1), (&#39;Lapras&#39;, &#39;Mew&#39;, 1), (&#39;Lickitung&#39;, &#39;Dragonite&#39;, 1), (&#39;Lickitung&#39;, &#39;Vileplume&#39;, 1), (&#39;Machamp&#39;, &#39;Machoke&#39;, 1), (&#39;Machamp&#39;, &#39;Onix&#39;, 1), (&#39;Machamp&#39;, &#39;Pinsir&#39;, 1), (&#39;Machoke&#39;, &#39;Arcanine&#39;, 1), (&#39;Machoke&#39;, &#39;Machamp&#39;, 1), (&#39;Machoke&#39;, &#39;Machop&#39;, 1), (&#39;Magikarp&#39;, &#39;Krabby&#39;, 1), (&#39;Magmar&#39;, &#39;Kingler&#39;, 1), (&#39;Magmar&#39;, &#39;Moltres&#39;, 1), (&#39;Magneton&#39;, &#39;MrMime&#39;, 1), (&#39;Mankey&#39;, &#39;Arcanine&#39;, 1), (&#39;Mankey&#39;, &#39;Jynx&#39;, 1), (&#39;Marowak&#39;, &#39;Cubone&#39;, 1), (&#39;Marowak&#39;, &#39;Farfetchd&#39;, 1), (&#39;Mew&#39;, &#39;Lickitung&#39;, 1), (&#39;Mew&#39;, &#39;Squirtle&#39;, 1), (&#39;Mewtwo&#39;, &#39;Dewgong&#39;, 1), (&#39;Moltres&#39;, &#39;Ponyta&#39;, 1), (&#39;MrMime&#39;, &#39;Slowpoke&#39;, 1), (&#39;Muk&#39;, &#39;Grimer&#39;, 1), (&#39;Nidoking&#39;, &#39;Nidorino&#39;, 1), (&#39;Nidoqueen&#39;, &#39;Lapras&#39;, 1), (&#39;Nidoqueen&#39;, &#39;Machamp&#39;, 1), (&#39;Nidorina&#39;, &#39;Machop&#39;, 1), (&#39;Nidorina&#39;, &#39;Nidorino&#39;, 1), (&#39;Ninetales&#39;, &#39;Scyther&#39;, 1), (&#39;Onix&#39;, &#39;Golem&#39;, 1), (&#39;Onix&#39;, &#39;Weedle&#39;, 1), (&#39;Paras&#39;, &#39;Tangela&#39;, 1), (&#39;Parasect&#39;, &#39;Hitmonchan&#39;, 1), (&#39;Parasect&#39;, &#39;Moltres&#39;, 1), (&#39;Parasect&#39;, &#39;Vileplume&#39;, 1), (&#39;Persian&#39;, &#39;Ninetales&#39;, 1), (&#39;Pidgeot&#39;, &#39;Bellsprout&#39;, 1), (&#39;Pidgeot&#39;, &#39;Spearow&#39;, 1), (&#39;Pidgeotto&#39;, &#39;Spearow&#39;, 1), (&#39;Pidgey&#39;, &#39;Pidgeot&#39;, 1), (&#39;Pidgey&#39;, &#39;Sandslash&#39;, 1), (&#39;Pidgey&#39;, &#39;Spearow&#39;, 1), (&#39;Pikachu&#39;, &#39;Drowzee&#39;, 1), (&#39;Pinsir&#39;, &#39;Charmeleon&#39;, 1), (&#39;Poliwrath&#39;, &#39;Poliwhirl&#39;, 1), (&#39;Poliwrath&#39;, &#39;Tangela&#39;, 1), (&#39;Ponyta&#39;, &#39;Goldeen&#39;, 1), (&#39;Primeape&#39;, &#39;Cubone&#39;, 1), (&#39;Psyduck&#39;, &#39;Blastoise&#39;, 1), (&#39;Raichu&#39;, &#39;Dragonite&#39;, 1), (&#39;Raticate&#39;, &#39;Arcanine&#39;, 1), (&#39;Raticate&#39;, &#39;Primeape&#39;, 1), (&#39;Raticate&#39;, &#39;Spearow&#39;, 1), (&#39;Rhydon&#39;, &#39;Kangaskhan&#39;, 1), (&#39;Rhyhorn&#39;, &#39;Rhydon&#39;, 1), (&#39;Rhyhorn&#39;, &#39;Scyther&#39;, 1), (&#39;Sandshrew&#39;, &#39;Kakuna&#39;, 1), (&#39;Sandslash&#39;, &#39;Drowzee&#39;, 1), (&#39;Seadra&#39;, &#39;Articuno&#39;, 1), (&#39;Seel&#39;, &#39;Dewgong&#39;, 1), (&#39;Seel&#39;, &#39;Magnemite&#39;, 1), (&#39;Slowbro&#39;, &#39;Clefable&#39;, 1), (&#39;Slowbro&#39;, &#39;Grimer&#39;, 1), (&#39;Slowpoke&#39;, &#39;Charmeleon&#39;, 1), (&#39;Slowpoke&#39;, &#39;Exeggcute&#39;, 1), (&#39;Staryu&#39;, &#39;Starmie&#39;, 1), (&#39;Tentacool&#39;, &#39;Porygon&#39;, 1), (&#39;Vaporeon&#39;, &#39;Seadra&#39;, 1), (&#39;Venonat&#39;, &#39;Staryu&#39;, 1), (&#39;Venusaur&#39;, &#39;Gastly&#39;, 1), (&#39;Venusaur&#39;, &#39;Ivysaur&#39;, 1), (&#39;Venusaur&#39;, &#39;Scyther&#39;, 1), (&#39;Vulpix&#39;, &#39;Koffing&#39;, 1), (&#39;Vulpix&#39;, &#39;Weedle&#39;, 1), (&#39;Wartortle&#39;, &#39;Kadabra&#39;, 1), (&#39;Wartortle&#39;, &#39;Nidoqueen&#39;, 1), (&#39;Weedle&#39;, &#39;Hypno&#39;, 1), (&#39;Weedle&#39;, &#39;Psyduck&#39;, 1), (&#39;Weepinbell&#39;, &#39;Weedle&#39;, 1), (&#39;Weezing&#39;, &#39;Graveler&#39;, 1), (&#39;Weezing&#39;, &#39;Koffing&#39;, 1), (&#39;Zubat&#39;, &#39;Aerodactyl&#39;, 1), (&#39;Zubat&#39;, &#39;Diglett&#39;, 1)] . . Let&#39;s first examine (&#39;Mankey&#39;, &#39;Primeape&#39;, 4) . Image.open((path/&quot;Mankey&quot;).ls()[0]) . Image.open((path/&quot;Primeape&quot;).ls()[0]) . The above two pokemon are quite similar to each other. From wiki) . it esolves from Mankey starting at level 28. . Let&#39;s take a look at another confusion pair:(&#39;Ponyta&#39;, &#39;Rapidash&#39;, 4) . Image.open((path/&quot;Ponyta&quot;).ls()[0]) . Image.open((path/&quot;Rapidash&quot;).ls()[0]) . It&#39;s another pair of evolution.From wiki) . It evolves from Ponyta starting at level 40 . Let&#39;s fine tune our model . First step, pick a more deeper model resnet34 and find a optimal learning rate . resnet34_learn = cnn_learner(dls, resnet34, metrics=error_rate) lr_min,lr_steep = resnet34_learn.lr_find() . Print out lr_min / 10, and lr_steep . print(f&quot;Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}&quot;) . Minimum/10: 1.20e-02, steepest point: 1.10e-02 . In the learning rate plot, it appers that a learning rate around 1e-2 would be approriate, so let&#39;s choose that . lr=1e-2 . Second step, use the lr and manually train the last layer for several epochs (3). . resnet34_learn = cnn_learner(dls, resnet34, metrics=error_rate) resnet34_learn.fit_one_cycle(3, lr) . epoch train_loss valid_loss error_rate time . 0 | 2.437599 | 0.898877 | 0.222874 | 00:29 | . 1 | 1.162741 | 0.594926 | 0.159824 | 00:29 | . 2 | 0.522703 | 0.386840 | 0.096774 | 00:29 | . Then, we unfreeze the model so that we can train all the layers (including all pretrained layers by ImageNet dataset. Before that, we need to find better learning rate since we&#39;ve trained for 3 epochs. . resnet34_learn.unfreeze() . resnet34_learn.lr_find() . SuggestedLRs(lr_min=5.248074739938602e-06, lr_steep=6.309573450380412e-07) . From above, we can pick a slice of learning rate [1e-6, 1e-4] . resnet34_learn.fit_one_cycle(12, lr_max=slice(1e-6,1e-4)) . epoch train_loss valid_loss error_rate time . 0 | 0.303374 | 0.374824 | 0.097507 | 00:35 | . 1 | 0.303054 | 0.356334 | 0.087243 | 00:36 | . 2 | 0.256385 | 0.336976 | 0.084311 | 00:35 | . 3 | 0.213164 | 0.317025 | 0.081378 | 00:35 | . 4 | 0.190199 | 0.310731 | 0.078446 | 00:35 | . 5 | 0.174076 | 0.304764 | 0.074047 | 00:35 | . 6 | 0.151117 | 0.297080 | 0.073314 | 00:36 | . 7 | 0.139543 | 0.291337 | 0.071114 | 00:36 | . 8 | 0.141836 | 0.292920 | 0.073314 | 00:36 | . 9 | 0.128678 | 0.290009 | 0.070381 | 00:36 | . 10 | 0.125571 | 0.291345 | 0.074780 | 00:36 | . 11 | 0.109895 | 0.287401 | 0.071848 | 00:36 | . Let&#39;s take a look at loss plot. As you can see, the error_rate is sometimes increasing and reach a plateau. . resnet34_learnrn.recorder.plot_loss() . Now, we are having a model with around 93% accuracy. There are several ways to further improve the model: . In terms of accuracy, we can try larger model e.g. resnet50 | In terms of training time, we can use mixed-precision training to_fb16() with half folating point precision to expediate training 2-3x faster. | resnet50_learn = cnn_learner(dls, resnet50, metrics=error_rate).to_fp16() resnet50_learn.fine_tune(12, freeze_epochs=3) . epoch train_loss valid_loss error_rate time . 0 | 4.912830 | 2.322846 | 0.519795 | 00:48 | . 1 | 2.299072 | 0.941021 | 0.229472 | 00:46 | . 2 | 1.181747 | 0.640837 | 0.164956 | 00:46 | . epoch train_loss valid_loss error_rate time . 0 | 0.435982 | 0.416226 | 0.110704 | 01:06 | . 1 | 0.273867 | 0.355325 | 0.085777 | 01:04 | . 2 | 0.230902 | 0.362856 | 0.092375 | 01:03 | . 3 | 0.194805 | 0.355526 | 0.087243 | 01:04 | . 4 | 0.171032 | 0.329496 | 0.079912 | 01:04 | . 5 | 0.128437 | 0.276524 | 0.072581 | 01:03 | . 6 | 0.073753 | 0.252845 | 0.063783 | 01:04 | . 7 | 0.053434 | 0.255001 | 0.060117 | 01:03 | . 8 | 0.037929 | 0.249069 | 0.049853 | 01:04 | . 9 | 0.025870 | 0.246209 | 0.049120 | 01:04 | . 10 | 0.018314 | 0.240860 | 0.049120 | 01:03 | . 11 | 0.015480 | 0.238500 | 0.048387 | 01:03 | . Result . As you can see, using a resnet50 model, it can push the accuracy to 95% which is pretty good. We can have a final look at what the model gets wrong. . resnet50_interp = ClassificationInterpretation.from_learner(resnet50_learn) resnet50_interp.most_confused() . [(&#39;Kadabra&#39;, &#39;Alakazam&#39;, 4), (&#39;Kingler&#39;, &#39;Krabby&#39;, 3), (&#39;Marowak&#39;, &#39;Cubone&#39;, 3), (&#39;Pidgeot&#39;, &#39;Pidgeotto&#39;, 3), (&#39;Cubone&#39;, &#39;Marowak&#39;, 2), (&#39;Mankey&#39;, &#39;Primeape&#39;, 2), (&#39;Abra&#39;, &#39;Hypno&#39;, 1), (&#39;Blastoise&#39;, &#39;Nidorina&#39;, 1), (&#39;Charmander&#39;, &#39;Charmeleon&#39;, 1), (&#39;Dewgong&#39;, &#39;Mew&#39;, 1), (&#39;Diglett&#39;, &#39;Dugtrio&#39;, 1), (&#39;Doduo&#39;, &#39;Dodrio&#39;, 1), (&#39;Dratini&#39;, &#39;Dragonair&#39;, 1), (&#39;Geodude&#39;, &#39;Vulpix&#39;, 1), (&#39;Golem&#39;, &#39;Graveler&#39;, 1), (&#39;Graveler&#39;, &#39;Geodude&#39;, 1), (&#39;Graveler&#39;, &#39;Kadabra&#39;, 1), (&#39;Grimer&#39;, &#39;Muk&#39;, 1), (&#39;Gyarados&#39;, &#39;Machamp&#39;, 1), (&#39;Gyarados&#39;, &#39;Rhydon&#39;, 1), (&#39;Haunter&#39;, &#39;Venonat&#39;, 1), (&#39;Hitmonchan&#39;, &#39;Machamp&#39;, 1), (&#39;Jynx&#39;, &#39;Rattata&#39;, 1), (&#39;Kabutops&#39;, &#39;Electabuzz&#39;, 1), (&#39;Koffing&#39;, &#39;Weezing&#39;, 1), (&#39;Krabby&#39;, &#39;Kingler&#39;, 1), (&#39;Lapras&#39;, &#39;Tangela&#39;, 1), (&#39;Machoke&#39;, &#39;Machamp&#39;, 1), (&#39;Mankey&#39;, &#39;Rapidash&#39;, 1), (&#39;Mewtwo&#39;, &#39;Dewgong&#39;, 1), (&#39;Muk&#39;, &#39;Grimer&#39;, 1), (&#39;Nidoqueen&#39;, &#39;Golduck&#39;, 1), (&#39;Omastar&#39;, &#39;Dragonair&#39;, 1), (&#39;Parasect&#39;, &#39;Paras&#39;, 1), (&#39;Parasect&#39;, &#39;Vileplume&#39;, 1), (&#39;Pidgeot&#39;, &#39;Fearow&#39;, 1), (&#39;Pidgey&#39;, &#39;Sandslash&#39;, 1), (&#39;Poliwhirl&#39;, &#39;Poliwrath&#39;, 1), (&#39;Poliwrath&#39;, &#39;Poliwhirl&#39;, 1), (&#39;Ponyta&#39;, &#39;Rapidash&#39;, 1), (&#39;Rapidash&#39;, &#39;Ponyta&#39;, 1), (&#39;Rhydon&#39;, &#39;Krabby&#39;, 1), (&#39;Rhyhorn&#39;, &#39;Machoke&#39;, 1), (&#39;Rhyhorn&#39;, &#39;Nidorina&#39;, 1), (&#39;Rhyhorn&#39;, &#39;Onix&#39;, 1), (&#39;Seadra&#39;, &#39;Jolteon&#39;, 1), (&#39;Seel&#39;, &#39;Dewgong&#39;, 1), (&#39;Slowpoke&#39;, &#39;Slowbro&#39;, 1), (&#39;Squirtle&#39;, &#39;Wartortle&#39;, 1), (&#39;Tentacool&#39;, &#39;Tentacruel&#39;, 1), (&#39;Tentacruel&#39;, &#39;Tentacool&#39;, 1), (&#39;Venusaur&#39;, &#39;Ivysaur&#39;, 1), (&#39;Wartortle&#39;, &#39;Cubone&#39;, 1), (&#39;Zubat&#39;, &#39;Golbat&#39;, 1), (&#39;Zubat&#39;, &#39;Haunter&#39;, 1)] . . Image.open((path/&quot;Kadabra&quot;).ls()[0]) . Image.open((path/&quot;Alakazam&quot;).ls()[0]) . Image.open((path/&quot;Kingler&quot;).ls()[0]) . Image.open((path/&quot;Krabby&quot;).ls()[0]) . Image.open((path/&quot;Marowak&quot;).ls()[0]) . Image.open((path/&quot;Cubone&quot;).ls()[0]) . All above, are pretty confusing pairs of evolutions. For example, between the Kingler and the Krabby, which are really hard to tell the difference, it seems that Kingler has one crab plier bigger than the other. I feel if you are new to the pokemon world, there is a non-trivial chance you can tell the which is which! .",
            "url": "https://taihangye.github.io/evolve-or-die/jupyter/2021/06/27/pokemon-classifier.html",
            "relUrl": "/jupyter/2021/06/27/pokemon-classifier.html",
            "date": " • Jun 27, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Think Again - gain confident and being wrong with reflection",
            "content": "Plenty of evidence suggests that confidence is just as often the result of progress as the cause of it. We don’t have to wait for our confidence to rise to achieve challenging goals. We can build it through achieving challending goals. . 在做的过程中建立自信，而不是先有自信再去做。选择一个目标，拆分这个目标为更小的可实现的目标，对于每个小目标设置合适的时间限制，在实现目标的过程中学习所需的技能，寻找资源和人才，并在过程中对小目标做出不断的调整（比如时间线，比如执行方案等等）因为很多事在一开始没有办法了解到，只有再具体执行过程中会暴露。而在不断的实现目标的路上，自然对于自己的自信增加了，技能自信，比如我会使用某一个“工具”实现一个具体的“功能”是最低层次，对自己能够分解目标，知道如何到达目的的方法论自信是中间层次，对于目标是否合适以及可能带来的短期与长期的对个人、组织、甚至的影响与如何优化的策略自信是最重要的层次。 . Beging wrong is the only way I feel sure I’ve learned anything. … To unlock the joy of being wrong, we need to detach. I’ve learned that two kinds of detachment are especially useful: defaulting your present from your past and detaching your opinions from your identity. . 学会从错误中反思和学习是进步的最重要的基石。犯错，承认错误，冷静地分析和反思都是不容易的。这儿提到不要被自己的过去的身份所束缚，一个反思可能会让人感到非常不适应，怀疑是否是要做这样的调整，有点类似与跳出舒适圈的意思，可能会有情感上的不接受以及因为过去的习惯而带来的负面的情绪比如害怕、愤怒等。这儿应该不能着急，用冥想的方式接受这些情感，甚至尝试去剖析它们，看看更深层次的原因是什么，如何能够换一种方式接受新的改变的。另一种是不要被自己的(已有)的想法所束缚，人们会执着于证明自己的想法是对的，而不是关注事本身哪种方式去实现它更好。一直想着怎么去赢，去说服别人其实是挺常见的，我觉得更好地方式是倾听别人的想法，也让别人倾听自己的想法，充分的问题本身和各种思路有完全的理解，然后再去讨论最好的解决之道，这可能是任何一种现有的想法，可能是现有想法的混合体，可能是新的想法，但不管选择了哪一(几)种，我们能够更好地实现这件事，这才是关键。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/26/think-again-3.html",
            "relUrl": "/markdown/2021/06/26/think-again-3.html",
            "date": " • Jun 26, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Thoughts on Ethics for Data Science",
            "content": "Recently, I am taking a online deep learning course on fast.ai. The lesson 3 of the course is focusing on data ethics. The lecturer, Rachel Thomas, touches a few points that I echo back. Around 1:52:50, there is a short discussion . Q: Maybe the best way to incentivize ethical behavior it to tie financial or reputational risk to good behavior. In some ways, similar to how companies are now investing in cybersecurity because they don’t want to be the next Equifax. Can grassroots compaigns help in better ethical behaviors with regards to the use of AI? Rachel Thomas: …I think it’s hard for people to make the case to their boses of why they should be investing in cybersecurity. Particularly because cybersecurity is something that when it’s working well, you don’t notice it. … . Lots of things like cybersecurity that people are lacking of incentives/motivation to make an investment before something really bad happens to themselves. My personal experience is when designing a product (or running a service), many companies are eager to launch their product/service as early as possible with little test, and they call it “test it in production; move fast; quicker iteration beats fine-tuning”. In some cases, it will only lead to acceptable level of bad user experience while in others it could be devastating and turns out completely shutting down the business. Is there a good strategy to invest early before everything is to late? As mentioned above, it’s really hard to make the case unless it’s tied to financial/reputational risk, which is more close to a postmortem analysis after something bad happens. It’s easier to start this effort if the leadership team pocesses such mindset of prioritizing quality, privacy, security traits of their product/service, and building a culture around them. . Another point that hits me is around 2:05:52. I found the full version of interview and will quote here. . WHAT’S WRONG WITH AI Julia Angwn: I strongly believe that in order to solve a problem, you have to diagnose it, and that we’re still in the diagnosis phase of this. If you think about the turn of the century and industrialization, we had, I don’t know, 30 years of child labor, unlimited work hours, terrible working conditions, and it took a lot of journalist muckraking and advocacy to diagnose the problem and have some understanding of what it was, and then the activism to get laws changed. I feel like we’re in a second industrialization of data information. I think some call it the second machine age. We’re in the phase of just waking up from the heady excitement and euphoria of having access to technology at our fingertips at all times. That’s really been our last 20 years, that euphoria, and now we’re like, “Whoa, looks like there’re some downsides.” I see my role as trying to make as clear as possible what the downsides are, and diagnosing them really accurately so that they can be solvable. That’s hard work, and lots more people need to be doing it. It’s increasingly becoming a field, but I don’t think we’re all the way there. . Dianosing and understanding the full picture of the problem is not an easy problem. It takes non-trivial time to identify the exact problem and serves as the starting point of crafting potential solution. On the one hand, if we don’t fully understand the problem, it may cost way more time and resource to pivot. On the other hand, we can’t spend endless time on diagnosing a problem, it’s not pratical in reality and we never make any progress to exercise some potential solutions to test our understanding. It’s always a evolving and dynamic process that we put enough time ahead to understand the problem, then design solution and test it, measure the results to create a feedback loop to adjust the initial understanding and design a better solution. .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/23/thoughts-on-ethics-for-data-science.html",
            "relUrl": "/markdown/2021/06/23/thoughts-on-ethics-for-data-science.html",
            "date": " • Jun 23, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Think Again - Apple anecdote and Mount Stupid",
            "content": "The legend of Apple’s renaissance revolves around the lone genius of Steve Jobs. It was his conviction and clarity of vision, the story goes, that gave birth to the iPhone. Th reality is that he was dead-set against the mobile phone category. His employees had the vision for it, and it was their ability to change his mind that really revived Apple. Although Jobs knew how to “think different”, it was his team that did much of the rethinking. . 这个小故事还是挺有趣的，乔帮主一开始不想做手机，而且个人猜测以乔帮主的性格，讨厌一个东西就会真的坚定不移地讨厌。iPhone的诞生，至少说明那时的苹果有一个开放的文化，鼓励创新，给员工足够的机会去证明他们发现的新想法。试想，如果是让一个topdown的公司来做这件事，老板都不喜欢的东西，员工就算有很好的想法，甚至能实现这个想法，但没有足够的资源和支持，项目也很难做起来。 . . It’s when we progress from novice to amateur that we become overconfident. A bit of knowledge can be a dangerous thing. . 这个是很值得我们警惕的。对一个领域只了解了一些皮毛，就很容易大谈特谈自己的意见、想法，不去严谨地验证而仅凭直觉是非常危险的。在一个领域待得越久就越觉得自己了解的东西很有限，比自己厉害的越多，发表意见时也越委婉。目前感觉自己在软件工程师这个领域刚刚迈过愚昧之岭，前几年做项目总觉得这个东西不是挺简单的，为啥别人要拖延这么久，自己做项目也总是追求快速推进，而忽视很多东西，带来了很多后遗症。现在做项目就会先非常认真得去了解背景，查找资料，和这个领域的专家咨询，评估风险，找多方专家审阅的项目的顶层设计，同时也要和各个利益相关方聊好资源和项目所带来的好处，再开始具体分阶段实施。把这些完成好会对后面项目地进展有非常重要的帮助比如减少返工，更好的按阶段完成预期目标，利益分配等等。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/21/think-again-2.html",
            "relUrl": "/markdown/2021/06/21/think-again-2.html",
            "date": " • Jun 21, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "Think Again - mentality and "I'm not biased" bias",
            "content": "Think again can help you generate new solutions to old problems and revisit old solutions to new problems. It’s a path to learning more from the poeple around you and living with fewer regrets. A hallmark of wisdom is knowing when it’s time to abandon some of your most treasured tools and some of the most cherished parts of your identity. . 旧瓶装新酒，是相当常见的，比如一个商业模式可以用到新的行业。新瓶装旧酒，其实也就是改革，相对来说难以以无痛（低痛）的方式来实现，比如旧的商业模式已经不开始限制公司的发展，那么需要开始使用新的商业模式，那如何一步一步替代旧的模式和业务，让大家信服新的商业模式的有效性，如何调整组织人员，甚至改变文化以适应新的模式，这些都需要不断的调整试错，在某些特殊情况下甚至得面对更高烈度的“阵痛”来实现。这也是为什么新的创业公司能够击败曾经的王者的原因，庞大的身躯有时候是商业的护城河，有时候确实拖累企业适应新的趋势的负担。对于一个人来说也是一样，当你在一个领域做得足够好，足够高的时候，要思考的是如何能够放下一个领域带来的思想枷锁，甚至要放下所有去探索其他的方向或是领域。其实这也印证了易经乾卦的“九五，飞龙在天。上九，亢龙有悔”的道理。 . My favorite bias is the “I’m not biased” bias, in which people believe they’re more objective than others. It turns out that smart people are more likely to fall into this trap. The brighter you are, the harder it can be to see your own limitations. . 这里还挺有意思的，越“聪明”的人越容易觉得自己很公正，没有偏见。我觉得书中后面提到的一个“Confident humility”(兼顾自信和谦虚)，是一个很好的状态。这和Ray Dalio在Principle中提到的”Assertive and open-minded”其实是异曲同工的。对自己的把握和自信，同时认识到自己会有偏见，盲区，应该多听听相关专家们的意见来压力测试自己的想法。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/20/think-again-1.html",
            "relUrl": "/markdown/2021/06/20/think-again-1.html",
            "date": " • Jun 20, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "Why I start blogging and why the blog name is "Evolve Or Die"",
            "content": "Evolve Or Die . Principles by Ray Dalio:  Evolve or die. This evolutionary cycle is not just for people but for countries, companies, economies—for everything. And it is naturally self-correcting as a whole, though not necessarily for its parts. For example, if there is too much supply and waste in a market, prices will go down, companies will go out of business, and capacity will be reduced until the supply falls in line with the demand, at which time the cycle will start to move in the opposite direction. Similarly, if an economy turns bad enough, those responsible for running it will make the political and policy changes that are needed or they will not survive, making room for their replacements to come along. These cycles are continuous and play out in logical ways and they tend to be self-reinforcing. . I believe that every entity needs to focus on evolving (or they will die out), making connection with the world while consuming input from it and producing output to it. It’s similar to a dot on a huge net, without connecting to other dots, it’s a an island, it never grows or influences other dots. . Why blogging . In the past, writing and maintaining a blog is not my thing. Mostly, it’s due to imposter syndrome that I don’t feel I am qualified to share my immature idea. Recently, taking a course from fast.ai encourages me to take my first step writing and bloging since I am best postioned to help people one step behind me (including myself 6 months ago.) [1] . This blog will share my two cents mainly on technologies, leadership and managment. It may also touch areas that inspired me such as psychology, philosophy etc. This blog is powered by fastpages which takes me little effort to maintain while supports bunch of formats e.g. docx, jupyter notebook, markdown to share one’s work. . [1] Why you (yes, you) should blog by Rachel Thomas .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/14/why-i-start-blogging.html",
            "relUrl": "/markdown/2021/06/14/why-i-start-blogging.html",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post11": {
            "title": "Thoughts about tenacity and deep learning",
            "content": "The following are quoted from a fast.ai notebook (04_mnist_basics) discussing Tenacity and Deep Learning. I want to share some reflection on this “touching” anecdote. . The story of deep learning is one of tenacity and grit by a handful of dedicated researchers. After early hopes (and hype!) neural networks went out of favor in the 1990’s and 2000’s, and just a handful of researchers kept trying to make them work well. Three of them, Yann Lecun, Yoshua Bengio, and Geoffrey Hinton, were awarded the highest honor in computer science, the Turing Award (generally considered the “Nobel Prize of computer science”), in 2018 after triumphing despite the deep skepticism and disinterest of the wider machine learning and statistics community. Geoff Hinton has told of how even academic papers showing dramatically better results than anything previously published would be rejected by top journals and conferences, just because they used a neural network. Yann Lecun’s work on convolutional neural networks, which we will study in the next section, showed that these models could read handwritten text—something that had never been achieved before. However, his breakthrough was ignored by most researchers, even as it was used commercially to read 10% of the checks in the US! In addition to these three Turing Award winners, there are many other researchers who have battled to get us to where we are today. For instance, Jurgen Schmidhuber (who many believe should have shared in the Turing Award) pioneered many important ideas, including working with his student Sepp Hochreiter on the long short-term memory (LSTM) architecture (widely used for speech recognition and other text modeling tasks, and used in the IMDb example in «chapter_intro»). Perhaps most important of all, Paul Werbos in 1974 invented back-propagation for neural networks, the technique shown in this chapter and used universally for training neural networks (Werbos 1994). His development was almost entirely ignored for decades, but today it is considered the most important foundation of modern AI. There is a lesson here for all of us! On your deep learning journey you will face many obstacles, both technical, and (even more difficult) posed by people around you who don’t believe you’ll be successful. There’s one guaranteed way to fail, and that’s to stop trying. We’ve seen that the only consistent trait amongst every fast.ai student that’s gone on to be a world-class practitioner is that they are all very tenacious. . It’s indeed a great story about tenacity and grit. I ask myself: If most of my peers were standing on the other side, could I still firmly hold on to my position and prove their validness? Unfortunately, I can’t give a postive answer. People are mostly social animal, we need to be supported, loved and believed by our peers. Otherwise, our lives are in a danger if abandoned by our “tribe”. Taking the alternative path and be the minorities needs tremendous courage and belief that the truth rests on their side. I don’t think it’s always worthing the correctness our beliefs and/or ideas and win the battle of argument every time. For example, when you and your partner have different opinions, there is no need to convince them you are the right one. If your parner is reasonable person or the issue may lead to consequences you can’t bear, then the strategies to reach the agreement are another story. . Another point is as a learner of deep learning, we should catiously pace of our learning, not too fast and not too slow. If we go through all the material too fast, we pay less attention on the key components which may backfire when we try to go deeper into the area. Building a solid foundation, especially learning stuff you have no exposure before, is a smart strategy in order to go fast in the future. If we move too slow, we may lose interests because we are making enough progress to get feedbacks. For example, if I spend a whole month figuring out every nitty gritty details of math and library details of fast.ai, I won’t feel any excitement and may eventually drop the class. The course structure is well designed by fast.ai team adopting a top-down approach to grasp the whole picture of deep learning, train some state-of-the-art models solving real life problem in lession 1 &amp; 2 and intentionally leave out math and other coding details. .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/14/thoughts-on-tenacity-and-deep-learning.html",
            "relUrl": "/markdown/2021/06/14/thoughts-on-tenacity-and-deep-learning.html",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post12": {
            "title": "保持技术敏感度：Side Project",
            "content": "如果想长期在技术领域深耕，仅仅是take inputs from books, blogs, news，或者写一些对某某技术的“表面”的理解，那可能导致的一个问题就是深度和实战经验的匮乏。这个时候比较好的方式是做一些Side Project。 做side Project更多地是出于爱好，如果你更偏爱管理或是其他，那么不一定需要有技术的side project，每个人的时间都是有限的，花在你认为最有价值的事上才是明智的。如果你是想要做side project，但没有什么经验，我觉得先从搜索类似的project开始，从中获取一些资源和灵感，从小事做起，万事开头难，不用一开始就做的非常好，可以慢慢积累和改进。很喜欢一句话，大概意思是：如果你想要求快了，那么你就已经不重视这件事了，你只是把它当成了一件任务需要去完成。做side project尤其是自己不熟悉的领域，不断地问问题，寻找资源，解决问题，项目呀，其实是和拼乐高有类似的感觉：一个几千片的乐高如果毕其功于一役，那可能只会让你消耗掉你所有的热情，过程也不这么享受，也许很久你都不会想再去开始第二个。反之，你每天拼一点，弄清楚内部原理，享受拼装本身的乐趣，反而能长长久久的继续下去。 在做side project过程中，学习到的技术也好，思维也好，很多时候都是相通的，这些都可以帮助你工作中能有更独特的角度去处理一个问题。我认为这可能比技术本身更有价值，尤其是你在工作中可能不需要直接用到这个技术，那么思维方法反而是更能借鉴和转移的。 做side project其实也是一个能够扩大社交圈的方式。你可以通过项目认识更多有类似兴趣的人，可以有新的contributor加入，如果项目比较好，甚至会收到很多个人和组织的邀请去介绍你的项目。很多side project成为创业项目，认识合伙人的案例也屡见不鲜。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/12/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-side-project.html",
            "relUrl": "/markdown/2021/06/12/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-side-project.html",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post13": {
            "title": "How-to: Build a pet detector model in an hour",
            "content": "This is mostly inspired by a fast.ai MOOC: Practical Deep Learning for Coders.It used a top-down approach teaching the deep learning. Lesson 1 and 2 will directly build several the state of the art deep learning models by a few lines of code. . In this notebook, my goal is to train a model to tell the difference of my cat: Albus, a silver shaded british shorthair from all other british short hairs. There is little pratical utility of the model, though it can be extended to something like pet finder using cameras including CCTVs, phone&#39;s camera etc to help people find their missing pet. . As a reader, you just need some basic understanding of python (or similar) and really limited experience of coding such as variable assignment, import libraries, calling some functions. I will explain every step in this notebook of what it&#39;s achieving. . Import your libraries . This is some basic python code import fastai/fastbook libraries (built by fast.ai team) to your jupyter notebook so that you can use all classes, functions in the libraries. One thing you might notice, it&#39;s generally a bad habit to import *, but according to fast.ai mooc, they pay extra attention on this, and it only imports necessary artifacts into the notebook, so you don&#39;t have to worry to much about it. . from fastbook import * from fastai.vision.widgets import * . Prepare your data . In this step, it will prepare your training data. . For my pet Albus, I upload around 150 pictures into a folder british_shorthair/albus. | For the not_albus part, I use bing image search API to find around 150 silver shaded british shorthair images and download them into british_shorthair/albus. More details about bing image searchTo download images with Bing Image Search, sign up at Microsoft Azure for a free account. You will be given a key, which you can copy and enter in a cell as follows (replacing &#39;XXX&#39; with your key and executing it)3. Once you download data from internet, it&#39;s possble some of images are corrupted. Thus, I use verify_images provided by fast.ai to verify all of images and unlink failures. . | silver_british_shorthair_path = Path(&#39;british_shorthair&#39;) . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;xx&#39;) . results = search_images_bing(key, &#39;sliver shaded british shorthair&#39;) . if not silver_british_shorthair_path.exists(): silver_british_shorthair_path.mkdir() dest = (silver_british_shorthair_path/&#39;not_albus&#39;) dest.mkdir(exist_ok=True) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . fns = get_image_files(silver_british_shorthair_path) . failed = verify_images(fns) . failed.map(Path.unlink) . (#0) [] . (silver_british_shorthair_path/&#39;not_albus&#39;).ls() . (#125) [Path(&#39;british_shorthair/not_albus/00000099.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000047.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000055.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000063.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000107.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000061.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000110.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000112.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000147.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000103.jpg&#39;)...] . not_albus_img = Image.open(silver_british_shorthair_path/&#39;not_albus/00000099.jpeg&#39;) not_albus_img.to_thumb(128, 128) . (silver_british_shorthair_path/&#39;albus&#39;).ls() . (#149) [Path(&#39;british_shorthair/albus/IMG_20200726_223920.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20200722_094159.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201020_185137.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20200119_211456.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20200516_162728.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201011_230014.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201024_222227.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201101_184418.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20210223_112905.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201020_185135.jpg&#39;)...] . albus_img = Image.open(silver_british_shorthair_path/&#39;albus/IMG_20200726_223920.jpg&#39;) albus_img.to_thumb(128, 128) . Train your model . In the following code cell, it only contains 4 lines of code but it does quite a lot: . Line 1: It prepares your data for training your model. It returns a DataBlock which is a fast.ai class blocks=(ImageBlock, CategoryBlock): It tells datablock that the input data is image and label is category | get_items=get_image_files: it means when loading input item, it will use get_image_files function to load the data | splitter=RandomSplitter(valid_pct=0.2, seed=42): it means that a randomation split will be performed to split your data into training (80%) and validation (20%). Seed will guarantee everytime it does a separation, the result will be the same. | get_y=parent_label: it teams when load label, it will find the image&#39;s parent folder name as the label name, which is a common way to organize the data | item_tfms=RandomResizedCrop(224, min_scale=0.5): It applies item-wise transformation, which randomly resize and crop you image with size 224 px and minimum 50% of original image. | batch_tfms=aug_transforms(): It&#39;s using image augmentation technics to transform batch of images. It will flip, twist, adjust different stats of your images to generate &quot;new&quot; images for training purpose so that model can learn from different perspectives. | | Line 2: It loads the actual data from your path | Line 3: We use a cnn learner with our data, and resnet18 architecture and use error rate as our metrics. The architecture in our case is not supper important and it&#39;s a deep residual network pretrained on imagenet (more on https://pytorch.org/hub/pytorch_vision_resnet/). For error rate, you will see that at each epoch (iteration) of training, what percentage of images that model makes mistake predict the correct label on validation set. | Line 4: it uses transfer learning technics and you don&#39;t need to train the model from scatch. Instead, you just need to call fine tune for 4 epochs on your training data which saves us a lot of time and reduces the requirements on the number of images we need to train a good model. | # Using transfer learning tactic since I don&#39;t have enough albus picture to train british_sh = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms() ) dls = british_sh.dataloaders(silver_british_shorthair_path) learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.217437 | 3.258252 | 0.425926 | 00:18 | . epoch train_loss valid_loss error_rate time . 0 | 0.540694 | 1.086071 | 0.388889 | 00:19 | . 1 | 0.425827 | 0.172585 | 0.055556 | 00:18 | . 2 | 0.306371 | 0.045891 | 0.037037 | 00:18 | . 3 | 0.277176 | 0.029750 | 0.000000 | 00:19 | . Checkout how your model perform . This section helps you quick understand how your model perform by showing confusion matrix: compare the model prediction against the actual label. As we can see, our model is pretty good at predicting albus! . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Export you model . This step is not necessary if you don&#39;t want to use your model anywhere else. However, if you do, exporting your model to the pickle format and loading it at somewhere else e.g. your web server, mobile app is really easy way to use your model. . learn.export(&#39;albus-detector.pkl&#39;) . Make predictions . I prepare some test data (which model never sees in training as well as in validation sets) to see if model can actually predict on those images. As the result, for two cases, it predicts correct answer. However, you can prepare more test data to evaluate your model! . print(learn.predict(&#39;albus_test/IMG_20190328_193913.jpg&#39;)) print(learn.predict(&#39;albus_test/not_albus_1.jpeg&#39;)) . (&#39;albus&#39;, tensor(0), tensor([9.9960e-01, 3.9629e-04])) . (&#39;not_albus&#39;, tensor(1), tensor([0.0128, 0.9872])) . Build some simple UI widgets . This part is totally optional. It&#39;s fun to have some interaction UI widgets to . Upload a photo from you computer | Shows the prediction as well as how confident it is | As you can see in the following cell, I uploaded a pretty &quot;tricky&quot; image and model says it has high confidence (0.9993) that it&#39;s Albus! . learn_inf = load_learner(&#39;albus-detector.pkl&#39;, cpu=True) learn_inf.predict(&#39;albus_test/IMG_20190328_193913.jpg&#39;) . (&#39;albus&#39;, tensor(0), tensor([9.9960e-01, 3.9629e-04])) . btn_upload = widgets.FileUpload() output = widgets.Output() label = widgets.Label() . def on_click(change): img = PILImage.create(btn_upload.data[-1]) output.clear_output() with output: display(img.to_thumb(128, 128)) pred, index, prob = learn_inf.predict(img) label.value = f&#39;Prediction: {pred} with probability {prob[index]:.04f}&#39; . btn_upload.observe(on_click, names=[&#39;data&#39;]) . display(VBox([ widgets.Label(&quot;Upload your picture to tell if it&#39;s albus&quot;), btn_upload, output, label ])) .",
            "url": "https://taihangye.github.io/evolve-or-die/jupyter/2021/06/12/albus-detector.html",
            "relUrl": "/jupyter/2021/06/12/albus-detector.html",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post14": {
            "title": "Thoughts about the Leadership Pipeline - Overview",
            "content": "There are six leadership passages that a leader needs to go through. The book focuses on helping readers become familiar with the skills, time applications, and work values demanded by each passage, as well as this particular leadership gestalt. . Passage One: From Managing Self to Managing Others . Manageing self: They contribute by doing the assigned work within given time frames and in ways that meet objectives. By sharpening and boardening their individual skills, they make increased contributions and are then considered “promotable” by organizations. From a time application standpoint, the learning involves planning (so that work is completed on time), punctuality, content, quality, and reliability. The work values to be developed include acceptance of the company culture and adopting of professional standards. | Managing others: The skills people should learn at this first leadership passage include planning work, filling jobs, assigning work, motivating, coaching, and measuring the work of others.They must shift from “doing” work to getting work done through others. They must believe that making time for others, planning, coaching, and the like are necessary tasks and are their responsibility. More than that, they must view this other-directed work as mission-critical to their sucess. Passage Two: From Managing Others to Managing Managers . Perhaps the biggest difference from the previous passage is that here, managers must be pure management. Now they need to divest themselves of individual tasks. The key skills that must be mastered duration this transition include . | Selecting people to turn Passage One | Assigning managerial and leadership work to them | Measuring their progress as managers | Coaching them | Beginning to think beyond their function and concerning themselves with strategic issues that support the overall business One of the touch responsibility of managers of managers is to return people to individual-contributor roles if first-line managers don’t shift their behaviors and values Passage Three: From Managing Managers to Functional Manager . | Skills: New communication skills with individual contributors | Endeavor to understand areas that are outside their own experiences and also learn to value it | Team play with other functional managers and competition for resources based on business needs | Proficient strategiest, not only for their function but also for blending their functional strategy with the overall business strategy. | . | Time-application: Participating in business team meetings and working with other functional managers | Delegating responsibility for overseeing many functional tasks to direct reports | . | Value Long-term strategy, such as state-of-the-art, futuristic thinking for their function, is usually what gives most managers trouble. Passage Four: From Functional Manager to Business Manager . | . | Receive significant autonomy | In charge of integrating functions | From looking at plans and proposals functionally to a profit perspective and to a long-term view | Balancing act between future goals and present needs and making trade-offs between the two Passage Five: From Business Manager to Group Manager . | Similar managing self to managing others, a business manager values the success of his own business while a group manager values the success of other people’s businesses. | Evaluating strategy for resource allocation and deployment purposes. | Development of business managers | Portfolio strategy: Do I have the right collection of businesses? What to add, subtract and change? | Avoid wishful thinking and instead taking a hard, objective looking at their range of resources and making a judment based on analysis and experience. Passage Six: From Group Manager to Enterprise Manager . | Long term visionary thinkers | Develop operating mechanisms to know and drive quarter-by-quarter performance that is in tune with longer-term strategy. | Well-developed external sensitivity and the ability to manage external constituencies, sense significant external shifts, and do something about them proactively. | Let go of the pieces - that is, the individual products and customers - and focus on the whole | Assume a team of high-achieving and ambitious direct reports. | .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/06/The-Leadership-Pipelines-overview.html",
            "relUrl": "/markdown/2021/06/06/The-Leadership-Pipelines-overview.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post15": {
            "title": "保持技术敏感度：书, 论文，线上课程，技术博客与信息流",
            "content": "书 . 书中自有黄金屋。读书是一个系统性学习的过程，在读书的过程中时常要思考Why/How/What，内化到自己的技术储备中。读技术书更多的是要弄懂抽象的概念，触类旁通，而不是记住所有的细节。技术类的书缺点也相对明显，那就是即时性相对会差一些，不能反映当下正在流行的技术，也不能解决具体生产中你面对的问题。 . 论文 . 如果想要了解学术界比较前沿的技术研究，看一些论文是一种不错的选择，有一些概述性质的论文，或是经典、引用非常多的论文是一个不错的开始。这对人的技术基础有比较高的要求，我自己其实看得也不是很多，所以也不做过多的评论。 . 线上课程 . 这其实是一个非常不错的方式来保持技术敏感度，并真实地写一些代码get hands dirty的方式。我之前在Oracle的老板是VP of Enigeer, 他还上了挺多线上的课程，包括很知名的Andrew Ng的Stanford Machine Learning。我自己也对线上课程比较看好，现在的很多好的课程都比较注重hands on以及保持所用的技术与业界接轨，很多这样的课程都是由大学教授或是业界的大佬们所开设的，价格也都还挺便宜的。比较推荐大家看看fast.ai的课程的，我最近也在看。 . 技术博客与信息流 . 可以订阅一些技术博客或者信息流，来科普一些新闻和最新的动向，知道业界不同的公司在用什么样的技术，做什么样的产品等等。这儿很多科技公司有自己的Engineering/Data Blog，是比较好的来源。当然这儿不太推荐每天有事没事就刷，可以一段时间集中半天来浏览，做到更深度和系统化的思考。与此同时开始写一些自己的技术、管理的博客也是一种整理更新自己技术体系的好方法，这儿有两篇比较好的文章是写为什么要写博客的Why you (yes, you) should blog,更好地写博客Advise for better blog posts。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%B9%A6,-%E8%AE%BA%E6%96%87%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%96%B0%E9%97%BB.html",
            "relUrl": "/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%B9%A6,-%E8%AE%BA%E6%96%87%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%96%B0%E9%97%BB.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post16": {
            "title": "保持技术敏感度：接受",
            "content": "之前聊了为什么想要分享这个话题，现在我想聊聊如何接受技术能力下降的问题。 成为管理者，首要任务是让支持好你负责的团队中的每一个人，而不是直接产出结果。这往往是一个是从技术到管理转变的最大障碍，思维和价值观还是停留在我要直接为产品、结果负责，其实你直接负责的是你的团队，间接为团队做出的结果负责。有了思维模式的转变，随之带来的就是技能和时间分配的转变，管理者无法再花费大部分时间在技术细节上，更多的是在大方向上的理解，以及信任团队中技术领袖的决策，获得二手的技术信息。在获得新技能的同时，技术能力敏感度无法避免地会随之下降。 主动承认这个客观事实是保持一定技术敏感度的第一步。你不必技术在团队中是第一的，你也不应该花费大部分时间在技术上，越早认清楚这一点，越早你能更有性价比地去保持技术敏感度。 .",
            "url": "https://taihangye.github.io/evolve-or-die/tech/management/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E6%8E%A5%E5%8F%97.html",
            "relUrl": "/tech/management/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E6%8E%A5%E5%8F%97.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post17": {
            "title": "保持技术敏感度：了解顶层架构",
            "content": "吃老本 . 前一篇聊了成为技术管理者后，不免会在技术上有所退步，我们首先要接受这个事实。那接受后是不是就可以安心地吃老本呢，当然不是。在现金这个社会，只需要一两年，甚至更短的时间内技术就会迭代，一年前火热的框架，可能在今年就会被另一套技术或是框架所替代。作为技术管理者，除非你在成为技术管理者前已经有大量的沉淀，对各种技术融汇贯通，否则老本真没几年好吃。 . Why/How/What . 那既然技术迭代得那么快，而管理者又不可能完全专注于技术上，那么就要着眼于顶层的架构，能够对自己领域内的系统的不同设计回答why, how和what。why其实是最重要的，核心是回答一个系统服务于解决一个什么现实中的问题，就比如消息队列是一种服务间的异步通讯方式，主要解决不需要同步（即时性）的操作的请求和应答。how是回答为了实现这个功能，从meta层面如何设计这个系统，这儿有一个比较好用的判断标准，你能不能在10分钟（甚至5分钟）就把这个系统的设计思路给一个有一定技术背景但没有结束过你的系统的人讲清楚系统是怎么运作的，并谈谈其关键指标，不同设计的优劣与分别适用于怎么样的场景、需求。这儿还是以消息队列来举例，最经典的kafka的模型，producer -&gt; broker/queue -&gt; consumer，一个或多个producer发送消息到broker的某个topic，一个或多个consumer可以订阅broker的topic来获得更新，这就是最基础的how。what注重于细节设计，注重一个系统里每个子系统的设计与实现，了解的深度可以更加因地制宜，但一些关键点还是需要知道的。比如消息队列中broker的persistent策略，consumer如何确保不会漏消系，遇到重复的消息应该怎么处理等等。 . Priority . 一个技术型公司当技术团队超过50人后一线技术管理者需要更了解how和what，而更高层级的管理者的应该更偏重why和how，放手what。这儿举个WhatsApp的例子，当WhatsApp在被FB收购前还只有10~30人左右的工程师团队时，每个人都非常hands on，也没有什么一线技术管理，只有工程师，一个工程师负责一大块的功能。当被收购后慢慢团队到了50-100人，就开始出现技术管理，这个阶段没有太多的层级，所以每个manager其实也还是输出一定代码的。后期发展到几百人的团队，不同的国家都有团队时，一线manager就不会再输出太多代码了（偶尔会有一些，因人而异），而senior manager及以上更多地就会注重why，how并且challenge手下一些what的问题，来获得二手的信息。 .",
            "url": "https://taihangye.github.io/evolve-or-die/tech/management/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%BA%86%E8%A7%A3%E9%A1%B6%E5%B1%82%E6%9E%B6%E6%9E%84.html",
            "relUrl": "/tech/management/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%BA%86%E8%A7%A3%E9%A1%B6%E5%B1%82%E6%9E%B6%E6%9E%84.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post18": {
            "title": "保持技术敏感度：为什么想要分享这个话题",
            "content": "保持技术敏感度：为什么想要分享这个话题 . 想做成一个系列的分享，第一篇就写写为什么会想要分享这个话题。 管理者不是天生就是在管理的位置上，都会经过一份或者几分技术类的工作 (当然这里说的技术适用于很多领域比如市场，产品，销售等等，不仅仅是计算机相关的技术。当然因为我本身是做IT的，所以会以IT技术为例做分享)，最终成为一个管理者的。当然第一份工作就是创业的话会有一些些的不同，但即使你是创始人之一，也是同时在做技术类和管理类的工作。当一个人成为了管理者后，就会面对一个问题，你的主要职责是支持你的团队，以团队为你的最高优先级做出成绩。很多新的管理者，之前有着很出色的技术，会习惯于还在一线干活，或者还非常深入的参加技术层面的设计。很多国内的公司对于一线管理者的要求也是即负责技术也负责管理。这就对一线管理者提出了更高的要求，你既要懂技术，也要能带团队。一个人的时间是有限的，你不可能还像原先一样团身心的投入在技术层面，那怎么样能够保持技术能力、敏感度，又不耽误管理的任务呢。 在第一篇的最后，说一个Google/Facebook在管理者上的一个演变，当Google、Facebook还相对较小时，有一种Technical Lead Manager (TLM) 的职位，就是像上面所提到的你既要负责技术方向，也要带团队，甚至偶尔还要撸起袖子写代码(当团队处于紧急状态时)。而当公司渐渐成长了之后TLM越来越稀少，公司也越来越不鼓励成为TLM，TLM的职位被拆分成了Engineering Mangager (EM)和Tech Lead (TL, IC5+ engineer)，EM和TL往往要合作，一个偏重于团队，一个偏重于技术，但TL也要动一些管理，EM也要能理解现有技术，趋势和评价可行性等(可以不懂一些细节)。我认为一方面是公司大了，自然分工会更明确，在单方面集中精力自然会做的比同事兼顾多方面来的更好，但对于EM来说，尤其是空降的EM，会对技术方面也有要求，而往往管理的技术可以通用，但是技术不一定通用，如何快速了解团队的技术就成了一个大问题。 .",
            "url": "https://taihangye.github.io/evolve-or-die/tech/management/2021/06/04/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6.html",
            "relUrl": "/tech/management/2021/06/04/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6.html",
            "date": " • Jun 4, 2021"
        }
        
    
  
    
        ,"post19": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://taihangye.github.io/evolve-or-die/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post20": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Education . I grew up in China. After graduating from Zhejiang University in Hangzhou (my hometown), I pursued master degree at Cornell University, NY, and graduated in 2016. . Work . I took my first job at Oracle, working on Internet of Things Cloud platform (Paas) and enterprise application (Saas). Since 2018, I joined Facebook as a software engineer in WhatsApp Data Infra team mainly focusing on building telemetry collection, AB testing infrastructure. . Life . I enjoy reading books. My interests lay in technology (e.g. DL, distributed system), leadership/management, self-improvement (both physically and mentally), investment (I am a believer of index investing). I also picked some topics that are not usually shown in my book list like philosophy, history. I also enjoy playing games. My favorite games are no limit texas hold’em, kingdom rush, and Zelda breath of the wild. For the kingdom rush one, I used to run my bilibili channel, and if you also enjoy this game, check it out! .",
          "url": "https://taihangye.github.io/evolve-or-die/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://taihangye.github.io/evolve-or-die/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}