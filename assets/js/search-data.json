{
  
    
        "post0": {
            "title": "Why I start blogging and why the blog name is "Evolve Or Die"",
            "content": "Evolve Or Die . Principles by Ray Dalio:  Evolve or die. This evolutionary cycle is not just for people but for countries, companies, economies—for everything. And it is naturally self-correcting as a whole, though not necessarily for its parts. For example, if there is too much supply and waste in a market, prices will go down, companies will go out of business, and capacity will be reduced until the supply falls in line with the demand, at which time the cycle will start to move in the opposite direction. Similarly, if an economy turns bad enough, those responsible for running it will make the political and policy changes that are needed or they will not survive, making room for their replacements to come along. These cycles are continuous and play out in logical ways and they tend to be self-reinforcing. . I believe that every entity needs to focus on evolving (or they will die out), making connection with the world while consuming input from it and producing output to it. It’s similar to a dot on a huge net, without connecting to other dots, it’s a an island, it never grows or influences other dots. . Why blogging . In the past, writing and maintaining a blog is not my thing. Mostly, it’s due to imposter syndrome that I don’t feel I am qualified to share my immature idea. Recently, taking a course from fast.ai encourages me to take my first step writing and bloging since I am best postioned to help people one step behind me (including myself 6 months ago.) [1] . This blog will share my two cents mainly on technologies, leadership and managment. It may also touch areas that inspired me such as psychology, philosophy etc. This blog is powered by fastpages which takes me little effort to maintain while supports bunch of formats e.g. docx, jupyter notebook, markdown to share one’s work. . [1] Why you (yes, you) should blog by Rachel Thomas .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/14/why-i-start-blogging.html",
            "relUrl": "/markdown/2021/06/14/why-i-start-blogging.html",
            "date": " • Jun 14, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "保持技术敏感度：Side Project",
            "content": "如果想长期在技术领域深耕，仅仅是take inputs from books, blogs, news，或者写一些对某某技术的“表面”的理解，那可能导致的一个问题就是深度和实战经验的匮乏。这个时候比较好的方式是做一些Side Project。 做side Project更多地是出于爱好，如果你更偏爱管理或是其他，那么不一定需要有技术的side project，每个人的时间都是有限的，花在你认为最有价值的事上才是明智的。如果你是想要做side project，但没有什么经验，我觉得先从搜索类似的project开始，从中获取一些资源和灵感，从小事做起，万事开头难，不用一开始就做的非常好，可以慢慢积累和改进。很喜欢一句话，大概意思是：如果你想要求快了，那么你就已经不重视这件事了，你只是把它当成了一件任务需要去完成。做side project尤其是自己不熟悉的领域，不断地问问题，寻找资源，解决问题，项目呀，其实是和拼乐高有类似的感觉：一个几千片的乐高如果毕其功于一役，那可能只会让你消耗掉你所有的热情，过程也不这么享受，也许很久你都不会想再去开始第二个。反之，你每天拼一点，弄清楚内部原理，享受拼装本身的乐趣，反而能长长久久的继续下去。 在做side project过程中，学习到的技术也好，思维也好，很多时候都是相通的，这些都可以帮助你工作中能有更独特的角度去处理一个问题。我认为这可能比技术本身更有价值，尤其是你在工作中可能不需要直接用到这个技术，那么思维方法反而是更能借鉴和转移的。 做side project其实也是一个能够扩大社交圈的方式。你可以通过项目认识更多有类似兴趣的人，可以有新的contributor加入，如果项目比较好，甚至会收到很多个人和组织的邀请去介绍你的项目。很多side project成为创业项目，认识合伙人的案例也屡见不鲜。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/12/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-side-project.html",
            "relUrl": "/markdown/2021/06/12/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-side-project.html",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "How-to: Build a pet detector model in an hour",
            "content": "This is mostly inspired by a fast.ai MOOC: Practical Deep Learning for Coders.It used a top-down approach teaching the deep learning. Lesson 1 and 2 will directly build several the state of the art deep learning models by a few lines of code. . In this notebook, my goal is to train a model to tell the difference of my cat: Albus, a silver shaded british shorthair from all other british short hairs. There is little pratical utility of the model, though it can be extended to something like pet finder using cameras including CCTC, phone&#39;s camera etc to help people find their missing pet. . As a reader, you just need some basic understanding of python (or similar) and really limited experience of coding such as variable assignment, import libraries, calling some functions. I will explain every step in this notebook of what it&#39;s achieving. . Import your libraries . This is some basic python code import fastai/fastbook libraries (built by fast.ai team) to your jupyter notebook so that you can use all classes, functions in the libraries. One thing you might notice, it&#39;s generally a bad habit to import *, but according to fast.ai mooc, they pay extra attention on this, and it only imports necessary artifacts into the notebook, so you don&#39;t have to worry to much about it. . from fastbook import * from fastai.vision.widgets import * . Prepare your data . In this step, it will prepare your training data. . For my pet Albus, I upload around 150 pictures into a folder british_shorthair/albus. | For the not_albus part, I use bing image search API to find around 150 silver shaded british shorthair images and download them into british_shorthair/albus. More details about bing image searchTo download images with Bing Image Search, sign up at Microsoft Azure for a free account. You will be given a key, which you can copy and enter in a cell as follows (replacing &#39;XXX&#39; with your key and executing it)3. Once you download data from internet, it&#39;s possble some of images are corrupted. Thus, I use verify_images provided by fast.ai to verify all of images and unlink failures. . | silver_british_shorthair_path = Path(&#39;british_shorthair&#39;) . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;xx&#39;) . results = search_images_bing(key, &#39;sliver shaded british shorthair&#39;) . if not silver_british_shorthair_path.exists(): silver_british_shorthair_path.mkdir() dest = (silver_british_shorthair_path/&#39;not_albus&#39;) dest.mkdir(exist_ok=True) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . fns = get_image_files(silver_british_shorthair_path) . failed = verify_images(fns) . failed.map(Path.unlink) . (#0) [] . (silver_british_shorthair_path/&#39;not_albus&#39;).ls() . (#125) [Path(&#39;british_shorthair/not_albus/00000099.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000047.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000055.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000063.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000107.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000061.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000110.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000112.jpeg&#39;),Path(&#39;british_shorthair/not_albus/00000147.jpg&#39;),Path(&#39;british_shorthair/not_albus/00000103.jpg&#39;)...] . not_albus_img = Image.open(silver_british_shorthair_path/&#39;not_albus/00000099.jpeg&#39;) not_albus_img.to_thumb(128, 128) . (silver_british_shorthair_path/&#39;albus&#39;).ls() . (#149) [Path(&#39;british_shorthair/albus/IMG_20200726_223920.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20200722_094159.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201020_185137.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20200119_211456.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20200516_162728.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201011_230014.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201024_222227.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201101_184418.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20210223_112905.jpg&#39;),Path(&#39;british_shorthair/albus/IMG_20201020_185135.jpg&#39;)...] . albus_img = Image.open(silver_british_shorthair_path/&#39;albus/IMG_20200726_223920.jpg&#39;) albus_img.to_thumb(128, 128) . Train your model . In the following code cell, it only contains 4 lines of code but it does quite a lot: . Line 1: It prepares your data for training your model. It returns a DataBlock which is a fast.ai class blocks=(ImageBlock, CategoryBlock): It tells datablock that the input data is image and label is category | get_items=get_image_files: it means when loading input item, it will use get_image_files function to load the data | splitter=RandomSplitter(valid_pct=0.2, seed=42): it means that a randomation split will be performed to split your data into training (80%) and validation (20%). Seed will guarantee everytime it does a separation, the result will be the same. | get_y=parent_label: it teams when load label, it will find the image&#39;s parent folder name as the label name, which is a common way to organize the data | item_tfms=RandomResizedCrop(224, min_scale=0.5): It applies item-wise transformation, which randomly resize and crop you image with size 224 px and minimum 50% of original image. | batch_tfms=aug_transforms(): It&#39;s using image augmentation technics to transform batch of images. It will flip, twist, adjust different stats of your images to generate &quot;new&quot; images for training purpose so that model can learn from different perspectives. | | Line 2: It loads the actual data from your path | Line 3: We use a cnn learner with our data, and resnet18 architecture and use error rate as our metrics. The architecture in our case is not supper important and it&#39;s a deep residual network pretrained on imagenet (more on https://pytorch.org/hub/pytorch_vision_resnet/). For error rate, you will see that at each epoch (iteration) of training, what percentage of images that model makes mistake predict the correct label on validation set. | Line 4: it uses transfer learning technics and you don&#39;t need to train the model from scatch. Instead, you just need to call fine tune for 4 epochs on your training data which saves us a lot of time and reduces the requirements on the number of images we need to train a good model. | # Using transfer learning tactic since I don&#39;t have enough albus picture to train british_sh = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms() ) dls = british_sh.dataloaders(silver_british_shorthair_path) learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.217437 | 3.258252 | 0.425926 | 00:18 | . epoch train_loss valid_loss error_rate time . 0 | 0.540694 | 1.086071 | 0.388889 | 00:19 | . 1 | 0.425827 | 0.172585 | 0.055556 | 00:18 | . 2 | 0.306371 | 0.045891 | 0.037037 | 00:18 | . 3 | 0.277176 | 0.029750 | 0.000000 | 00:19 | . Checkout how your model perform . This section helps you quick understand how your model perform by showing confusion matrix: compare the model prediction against the actual label. As we can see, our model is pretty good at predicting albus! . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . Export you model . This step is not necessary if you don&#39;t want to use your model anywhere else. However, if you do, exporting your model to the pickle format and loading it at somewhere else e.g. your web server, mobile app is really easy way to use your model. . learn.export(&#39;albus-detector.pkl&#39;) . Make predictions . I prepare some test data (which model never sees in training as well as in validation sets) to see if model can actually predict on those images. As the result, for two cases, it predicts correct answer. However, you can prepare more test data to evaluate your model! . print(learn.predict(&#39;albus_test/IMG_20190328_193913.jpg&#39;)) print(learn.predict(&#39;albus_test/not_albus_1.jpeg&#39;)) . (&#39;albus&#39;, tensor(0), tensor([9.9960e-01, 3.9629e-04])) . (&#39;not_albus&#39;, tensor(1), tensor([0.0128, 0.9872])) . Build some simple UI widgets . This part is totally optional. It&#39;s fun to have some interaction UI widgets to . Upload a photo from you computer | Shows the prediction as well as how confident it is | As you can see in the following cell, I uploaded a pretty &quot;tricky&quot; image and model says it has high confidence (0.9993) that it&#39;s Albus! . learn_inf = load_learner(&#39;albus-detector.pkl&#39;, cpu=True) learn_inf.predict(&#39;albus_test/IMG_20190328_193913.jpg&#39;) . (&#39;albus&#39;, tensor(0), tensor([9.9960e-01, 3.9629e-04])) . btn_upload = widgets.FileUpload() output = widgets.Output() label = widgets.Label() . def on_click(change): img = PILImage.create(btn_upload.data[-1]) output.clear_output() with output: display(img.to_thumb(128, 128)) pred, index, prob = learn_inf.predict(img) label.value = f&#39;Prediction: {pred} with probability {prob[index]:.04f}&#39; . btn_upload.observe(on_click, names=[&#39;data&#39;]) . display(VBox([ widgets.Label(&quot;Upload your picture to tell if it&#39;s albus&quot;), btn_upload, output, label ])) .",
            "url": "https://taihangye.github.io/evolve-or-die/jupyter/2021/06/12/albus-detector.html",
            "relUrl": "/jupyter/2021/06/12/albus-detector.html",
            "date": " • Jun 12, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Thoughts about the Leadership Pipeline - Overview",
            "content": "There are six leadership passages that a leader needs to go through. The book focuses on helping readers become familiar with the skills, time applications, and work values demanded by each passage, as well as this particular leadership gestalt. . Passage One: From Managing Self to Managing Others . Manageing self: They contribute by doing the assigned work within given time frames and in ways that meet objectives. By sharpening and boardening their individual skills, they make increased contributions and are then considered “promotable” by organizations. From a time application standpoint, the learning involves planning (so that work is completed on time), punctuality, content, quality, and reliability. The work values to be developed include acceptance of the company culture and adopting of professional standards. | Managing others: The skills people should learn at this first leadership passage include planning work, filling jobs, assigning work, motivating, coaching, and measuring the work of others.They must shift from “doing” work to getting work done through others. They must believe that making time for others, planning, coaching, and the like are necessary tasks and are their responsibility. More than that, they must view this other-directed work as mission-critical to their sucess. Passage Two: From Managing Others to Managing Managers . Perhaps the biggest difference from the previous passage is that here, managers must be pure management. Now they need to divest themselves of individual tasks. The key skills that must be mastered duration this transition include . | Selecting people to turn Passage One | Assigning managerial and leadership work to them | Measuring their progress as managers | Coaching them | Beginning to think beyond their function and concerning themselves with strategic issues that support the overall business One of the touch responsibility of managers of managers is to return people to individual-contributor roles if first-line managers don’t shift their behaviors and values Passage Three: From Managing Managers to Functional Manager . | Skills: New communication skills with individual contributors | Endeavor to understand areas that are outside their own experiences and also learn to value it | Team play with other functional managers and competition for resources based on business needs | Proficient strategiest, not only for their function but also for blending their functional strategy with the overall business strategy. | . | Time-application: Participating in business team meetings and working with other functional managers | Delegating responsibility for overseeing many functional tasks to direct reports | . | Value Long-term strategy, such as state-of-the-art, futuristic thinking for their function, is usually what gives most managers trouble. Passage Four: From Functional Manager to Business Manager . | . | Receive significant autonomy | In charge of integrating functions | From looking at plans and proposals functionally to a profit perspective and to a long-term view | Balancing act between future goals and present needs and making trade-offs between the two Passage Five: From Business Manager to Group Manager . | Similar managing self to managing others, a business manager values the success of his own business while a group manager values the success of other people’s businesses. | Evaluating strategy for resource allocation and deployment purposes. | Development of business managers | Portfolio strategy: Do I have the right collection of businesses? What to add, subtract and change? | Avoid wishful thinking and instead taking a hard, objective looking at their range of resources and making a judment based on analysis and experience. Passage Six: From Group Manager to Enterprise Manager . | Long term visionary thinkers | Develop operating mechanisms to know and drive quarter-by-quarter performance that is in tune with longer-term strategy. | Well-developed external sensitivity and the ability to manage external constituencies, sense significant external shifts, and do something about them proactively. | Let go of the pieces - that is, the individual products and customers - and focus on the whole | Assume a team of high-achieving and ambitious direct reports. | .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/06/The-Leadership-Pipelines-overview.html",
            "relUrl": "/markdown/2021/06/06/The-Leadership-Pipelines-overview.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "保持技术敏感度：书, 论文，线上课程，技术博客与信息流",
            "content": "书 . 书中自有黄金屋。读书是一个系统性学习的过程，在读书的过程中时常要思考Why/How/What，内化到自己的技术储备中。读技术书更多的是要弄懂抽象的概念，触类旁通，而不是记住所有的细节。技术类的书缺点也相对明显，那就是即时性相对会差一些，不能反映当下正在流行的技术，也不能解决具体生产中你面对的问题。 . 论文 . 如果想要了解学术界比较前沿的技术研究，看一些论文是一种不错的选择，有一些概述性质的论文，或是经典、引用非常多的论文是一个不错的开始。这对人的技术基础有比较高的要求，我自己其实看得也不是很多，所以也不做过多的评论。 . 线上课程 . 这其实是一个非常不错的方式来保持技术敏感度，并真实地写一些代码get hands dirty的方式。我之前在Oracle的老板是VP of Enigeer, 他还上了挺多线上的课程，包括很知名的Andrew Ng的Stanford Machine Learning。我自己也对线上课程比较看好，现在的很多好的课程都比较注重hands on以及保持所用的技术与业界接轨，很多这样的课程都是由大学教授或是业界的大佬们所开设的，价格也都还挺便宜的。比较推荐大家看看fast.ai的课程的，我最近也在看。 . 技术博客与信息流 . 可以订阅一些技术博客或者信息流，来科普一些新闻和最新的动向，知道业界不同的公司在用什么样的技术，做什么样的产品等等。这儿很多科技公司有自己的Engineering/Data Blog，是比较好的来源。当然这儿不太推荐每天有事没事就刷，可以一段时间集中半天来浏览，做到更深度和系统化的思考。与此同时开始写一些自己的技术、管理的博客也是一种整理更新自己技术体系的好方法，这儿有两篇比较好的文章是写为什么要写博客的Why you (yes, you) should blog,更好地写博客Advise for better blog posts。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%B9%A6,-%E8%AE%BA%E6%96%87%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%96%B0%E9%97%BB.html",
            "relUrl": "/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%B9%A6,-%E8%AE%BA%E6%96%87%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%96%B0%E9%97%BB.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "保持技术敏感度：接受",
            "content": "之前聊了为什么想要分享这个话题，现在我想聊聊如何接受技术能力下降的问题。 成为管理者，首要任务是让支持好你负责的团队中的每一个人，而不是直接产出结果。这往往是一个是从技术到管理转变的最大障碍，思维和价值观还是停留在我要直接为产品、结果负责，其实你直接负责的是你的团队，间接为团队做出的结果负责。有了思维模式的转变，随之带来的就是技能和时间分配的转变，管理者无法再花费大部分时间在技术细节上，更多的是在大方向上的理解，以及信任团队中技术领袖的决策，获得二手的技术信息。在获得新技能的同时，技术能力敏感度无法避免地会随之下降。 主动承认这个客观事实是保持一定技术敏感度的第一步。你不必技术在团队中是第一的，你也不应该花费大部分时间在技术上，越早认清楚这一点，越早你能更有性价比地去保持技术敏感度。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E6%8E%A5%E5%8F%97.html",
            "relUrl": "/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E6%8E%A5%E5%8F%97.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "保持技术敏感度：了解顶层架构",
            "content": "吃老本 . 前一篇聊了成为技术管理者后，不免会在技术上有所退步，我们首先要接受这个事实。那接受后是不是就可以安心地吃老本呢，当然不是。在现金这个社会，只需要一两年，甚至更短的时间内技术就会迭代，一年前火热的框架，可能在今年就会被另一套技术或是框架所替代。作为技术管理者，除非你在成为技术管理者前已经有大量的沉淀，对各种技术融汇贯通，否则老本真没几年好吃。 . Why/How/What . 那既然技术迭代得那么快，而管理者又不可能完全专注于技术上，那么就要着眼于顶层的架构，能够对自己领域内的系统的不同设计回答why, how和what。why其实是最重要的，核心是回答一个系统服务于解决一个什么现实中的问题，就比如消息队列是一种服务间的异步通讯方式，主要解决不需要同步（即时性）的操作的请求和应答。how是回答为了实现这个功能，从meta层面如何设计这个系统，这儿有一个比较好用的判断标准，你能不能在10分钟（甚至5分钟）就把这个系统的设计思路给一个有一定技术背景但没有结束过你的系统的人讲清楚系统是怎么运作的，并谈谈其关键指标，不同设计的优劣与分别适用于怎么样的场景、需求。这儿还是以消息队列来举例，最经典的kafka的模型，producer -&gt; broker/queue -&gt; consumer，一个或多个producer发送消息到broker的某个topic，一个或多个consumer可以订阅broker的topic来获得更新，这就是最基础的how。what注重于细节设计，注重一个系统里每个子系统的设计与实现，了解的深度可以更加因地制宜，但一些关键点还是需要知道的。比如消息队列中broker的persistent策略，consumer如何确保不会漏消系，遇到重复的消息应该怎么处理等等。 . Priority . 一个技术型公司当技术团队超过50人后一线技术管理者需要更了解how和what，而更高层级的管理者的应该更偏重why和how，放手what。这儿举个WhatsApp的例子，当WhatsApp在被FB收购前还只有10~30人左右的工程师团队时，每个人都非常hands on，也没有什么一线技术管理，只有工程师，一个工程师负责一大块的功能。当被收购后慢慢团队到了50-100人，就开始出现技术管理，这个阶段没有太多的层级，所以每个manager其实也还是输出一定代码的。后期发展到几百人的团队，不同的国家都有团队时，一线manager就不会再输出太多代码了（偶尔会有一些，因人而异），而senior manager及以上更多地就会注重why，how并且challenge手下一些what的问题，来获得二手的信息。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%BA%86%E8%A7%A3%E9%A1%B6%E5%B1%82%E6%9E%B6%E6%9E%84.html",
            "relUrl": "/markdown/2021/06/05/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6-%E4%BA%86%E8%A7%A3%E9%A1%B6%E5%B1%82%E6%9E%B6%E6%9E%84.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "保持技术敏感度：为什么想要分享这个话题",
            "content": "保持技术敏感度：为什么想要分享这个话题 . 想做成一个系列的分享，第一篇就写写为什么会想要分享这个话题。 管理者不是天生就是在管理的位置上，都会经过一份或者几分技术类的工作 (当然这里说的技术适用于很多领域比如市场，产品，销售等等，不仅仅是计算机相关的技术。当然因为我本身是做IT的，所以会以IT技术为例做分享)，最终成为一个管理者的。当然第一份工作就是创业的话会有一些些的不同，但即使你是创始人之一，也是同时在做技术类和管理类的工作。当一个人成为了管理者后，就会面对一个问题，你的主要职责是支持你的团队，以团队为你的最高优先级做出成绩。很多新的管理者，之前有着很出色的技术，会习惯于还在一线干活，或者还非常深入的参加技术层面的设计。很多国内的公司对于一线管理者的要求也是即负责技术也负责管理。这就对一线管理者提出了更高的要求，你既要懂技术，也要能带团队。一个人的时间是有限的，你不可能还像原先一样团身心的投入在技术层面，那怎么样能够保持技术能力、敏感度，又不耽误管理的任务呢。 在第一篇的最后，说一个Google/Facebook在管理者上的一个演变，当Google、Facebook还相对较小时，有一种Technical Lead Manager (TLM) 的职位，就是像上面所提到的你既要负责技术方向，也要带团队，甚至偶尔还要撸起袖子写代码(当团队处于紧急状态时)。而当公司渐渐成长了之后TLM越来越稀少，公司也越来越不鼓励成为TLM，TLM的职位被拆分成了Engineering Mangager (EM)和Tech Lead (TL, IC5+ engineer)，EM和TL往往要合作，一个偏重于团队，一个偏重于技术，但TL也要动一些管理，EM也要能理解现有技术，趋势和评价可行性等(可以不懂一些细节)。我认为一方面是公司大了，自然分工会更明确，在单方面集中精力自然会做的比同事兼顾多方面来的更好，但对于EM来说，尤其是空降的EM，会对技术方面也有要求，而往往管理的技术可以通用，但是技术不一定通用，如何快速了解团队的技术就成了一个大问题。 .",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2021/06/04/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6.html",
            "relUrl": "/markdown/2021/06/04/%E4%BF%9D%E6%8C%81%E6%8A%80%E6%9C%AF%E6%95%8F%E6%84%9F%E5%BA%A6.html",
            "date": " • Jun 4, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://taihangye.github.io/evolve-or-die/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://taihangye.github.io/evolve-or-die/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am a software engineer at WhatsApp. I believe that every entity needs to focus on evolving, making connection with the world by consuming input and producing output. In the past, writing and maintaining a blog is not my thing. Recently, taking a course from fast.ai encourages me to take my first step starting writing and bloging. Note that this blog is powered by fastpages which takes little effort to maintain a blog while supports bunch of formats e.g. docx, jupyter notebook, markdown to share one’s work. . This blog will mainly sharing my two cents mainly on technologies, leadership/managment. It may also touch areas that inspired me now and then. My main goal is journaling my ideas for personal reflection and hopefully inspiring you to evolve as well. .",
          "url": "https://taihangye.github.io/evolve-or-die/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://taihangye.github.io/evolve-or-die/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}